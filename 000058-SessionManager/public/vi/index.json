[
{
	"uri": "http://localhost:1313/Work-Shop/vi/4-s3log/4.1-updateiamrole/",
	"title": "Create IAM Role",
	"tags": [],
	"description": "",
	"content": "Create IAM Role cho Lamda để Lamda có quyền truy cập Bedrock.\nTạo IAM Role Truy cập vào IAM Click Create Roles. Tại ô chọn , chọn Lamda. Sau đó ấn next để tiếp tục chỉnh Role cho Lamda.\n"
},
{
	"uri": "http://localhost:1313/Work-Shop/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Sứ mệnh của dự án \u0026ldquo;AthenaBot\u0026rdquo; là cách mạng hóa trải nghiệm hỗ trợ khách hàng của chúng ta bằng cách triển khai một giải pháp Trí tuệ Nhân tạo (AI) thông minh, tức thì và luôn sẵn sàng. Chúng tôi mong muốn chuyển đổi bộ phận hỗ trợ từ một trung tâm chi phí (cost center) thành một động lực thúc đẩy sự hài lòng và lòng trung thành của khách hàng Chúng tôi đề xuất triển khai \u0026ldquo;AthenaBot\u0026rdquo; – một chatbot AI thế hệ mới, được xây dựng hoàn toàn trên kiến trúc Serverless của AWS và khai thác sức mạnh của Trí tuệ Nhân tạo Tạo sinh (Generative AI) qua dịch vụ Amazon Bedrock. Giải pháp này sẽ cung cấp khả năng hỗ trợ khách hàng tức thì, chính xác và tự nhiên 24/7, giải quyết triệt để các vấn đề hiện tại.\nVới việc sử dụng ChatBox AI, bạn sẽ có được những ưu điểm sau:\nTự động hóa các yêu cầu cấp 1, dự kiến tiết kiệm hơn 200 giờ làm việc của nhân viên mỗi tháng, tương đương giảm 25-30% khối lượng công việc cho nhân viên hỗ trợ. Với chi phí vận hành cực thấp (dưới $10/tháng), ROI của dự án gần như là tức thì và sẽ dương ngay trong tháng đầu tiên đi vào hoạt động. Ước tính dưới $10 mỗi tháng, tận dụng tối đa Bậc miễn phí của AWS Cần câu trả lời nhanh, chính xác, 24/7. Cung cấp hỗ trợ tức thì, mọi lúc, mọi nơi. Với những ưu điểm trên, bạn có thể sử dụng ChatBox AI của riêng mình để tiết kiệm chi phí và giúp sản phẩm của mình đáng tin cậy hơn.\n"
},
{
	"uri": "http://localhost:1313/Work-Shop/vi/",
	"title": "Session Management",
	"tags": [],
	"description": "",
	"content": "Làm việc với Amazon System Manager - Session Manager Tổng quan Trong bài lab này, bạn sẽ tìm hiểu các khái niệm cơ bản và thực hành về Amazon System Manager - Session Management. Thực hành tạo kết nối đến máy chủ public và máy chủ private trong VPC.\nNội dung Giới thiệu Các bước chuẩn bị Tạo kết nối đến máy chủ EC2 Quản lý session logs Port Forwarding Dọn dẹp tài nguyên "
},
{
	"uri": "http://localhost:1313/Work-Shop/vi/3-accessibilitytoinstances/3.1-public-instance/",
	"title": "Truy cập vào Amazon Bedrock",
	"tags": [],
	"description": "",
	"content": " Truy cập vào thanh tìm kiếm và search BedRock. Click chọn Model catalog. Kéo xuống vào chọn Model Acess. "
},
{
	"uri": "http://localhost:1313/Work-Shop/vi/3-accessibilitytoinstances/3.2-private-instance/",
	"title": "Request Access on AWS",
	"tags": [],
	"description": "",
	"content": "Đối với Model của AWS, chúng ta cần phải Request Access nó mới có thể sử dụng được. Có rất nhiều loại model được tích hợp ở BedRock , ở lần này chúng ta sẽ sử dụng model của AWS phát triển đó chính là TiTan Text G1 - Express. Đây là model tiết kiệm và hiệu quả nhất trong tầm giá.\nẤn vào Avalible to request và chọn Request model Acess. Sau khi chọn model mong muốn và ấn submit. Lưu ý bạn hãy đọc kỹ từng chi tiết model phù hợp tránh phát sinh tình huống lãng phí tài nguyên.\nNội dung: "
},
{
	"uri": "http://localhost:1313/Work-Shop/vi/4-s3log/4.2-creates3bucket/",
	"title": "Set permission for Lamda",
	"tags": [],
	"description": "",
	"content": "Trong bước này, chúng ta sẽ tạo 2 role là AmazonBedrockFullAcess và CloudWatchLogsFullAccess cho Lamda\nTạo Permission policies Truy cập giao diện add permission.\nẤn vào ô tìm kiếm gõ AmazonBedrockFullAcess. Ấn vào ô tìm kiếm gõ CloudWatchLogsFullAccess. Sau đó, chúng ta đặt tên cho Role này là ChatBoxLamdaRole Sau đó ấn Create Role.\n"
},
{
	"uri": "http://localhost:1313/Work-Shop/vi/2-prerequiste/",
	"title": "Sơ đồ kĩ thuật",
	"tags": [],
	"description": "",
	"content": "\rDưới đây là sơ đồ mô tả kiến trúc của dự án.\nNgười dùng: Mở trình duyệt và truy cập vào giao diện web của chatbot được host trên Amazon S3.\nFrontend (S3): Người dùng nhập câu hỏi và nhấn gửi. Mã JavaScript trên trình duyệt tạo một yêu cầu HTTPS POST chứa nội dung câu hỏi đến endpoint của API Gateway.\nAPI Gateway: Tiếp nhận yêu cầu, xác thực và chuyển tiếp đến hàm AWS Lambda.\nAWS Lambda: Hàm Lambda được kích hoạt. Mã Python bên trong hàm thực hiện: a. Đảm nhận (assume) một vai trò IAM được định cấu hình sẵn để có quyền gọi Bedrock. b. Xây dựng một \u0026ldquo;prompt\u0026rdquo; hoàn chỉnh từ câu hỏi của người dùng. c. Gọi API của Amazon Bedrock, truyền vào prompt và tên model.\nAmazon Bedrock: Xử lý prompt, tạo ra câu trả lời và gửi lại cho Lambda.\nResponse: Lambda nhận phản hồi từ Bedrock, định dạng lại nếu cần và trả về cho API Gateway. API Gateway sau đó chuyển tiếp câu trả lời này về cho trình duyệt của người dùng.\nHiển thị: JavaScript trên frontend nhận được phản hồi và hiển thị câu trả lời của AI lên giao diện.\n"
},
{
	"uri": "http://localhost:1313/Work-Shop/vi/3-accessibilitytoinstances/",
	"title": "Set Up Amazon Bedrock and Request Access on AWS",
	"tags": [],
	"description": "",
	"content": "Trong bước này, chúng ta sẽ thực hiện tạo Amazon Bedrock và Request Access model của AWS\n"
},
{
	"uri": "http://localhost:1313/Work-Shop/vi/4-s3log/4.3-creategwes3/",
	"title": "Tạo S3 Gateway endpoint",
	"tags": [],
	"description": "",
	"content": " Truy cập vào giao diện quản trị dịch vụ VPC Click Endpoints. Click Create endpoint. Tại trang Create endpoint. Tại mục Name tag điền S3GW. Tại mục Service Category click chọn AWS services. Tại ô tìm kiếm điền S3, sau đó chọn com.amazonaws.[region].s3 Tại mục Services chọn com.amazonaws.[region].s3 có Type là Gateway. Tại mục VPC , chọn Lab VPC. Tại mục Route tables, chọn cả 2 route table. Kéo chuột xuống dưới cùng, click Create endpoint. Bước tiếp theo chúng ta sẽ tiến hành cấu hình Session Manager để có thể lưu trữ các session logs tới S3 bucket chúng ta đã tạo.\n"
},
{
	"uri": "http://localhost:1313/Work-Shop/vi/4-s3log/",
	"title": "Create an IAM Role for Lambda.",
	"tags": [],
	"description": "",
	"content": "Với IAM role có chức năng là xác thực API Gateway requests và cấp quyền cho Lamda truy cập Bedrock và đảm bảo end-to-end cho dự án.\nNội dung: Create IAM role Set Role for Lamda Select Role for Bedrock Select Role for CloudWatch "
},
{
	"uri": "http://localhost:1313/Work-Shop/vi/4-s3log/4.4-configsessionlogs/",
	"title": "Theo dõi session logs",
	"tags": [],
	"description": "",
	"content": "Theo dõi session logs Truy cập giao diện quản trị dịch vụ System Manager - Session Manager Click tab Preferences. Click Edit. Kéo chuột xuống phía dưới, tại mục S3 logging, click chọn Enable. Bỏ chọn Allow only encrypted S3 buckets. Click chọn Choose a bucket name from the list. Chọn S3 bucket bạn đã tạo. Kéo chuột xuống phía dưới, click Save để lưu cấu hình.\nTruy cập giao diện quản trị dịch vụ System Manager - Session Manager\nClick Start session. Click chọn Private Windows Instance. Click Start session. Gõ lệnh ipconfig. Gõ lệnh hostname. Click Terminate để thoát session, click Terminate 1 lần nữa để xác nhận. Kiểm tra Session logs trong S3 Truy cập vào giao diện quản trị dịch vụ S3 Click vào tên S3 bucket chúng ta đã tạo cho bài lab. Click vào tên file sessions log Tại trang chi tiết objects , click Open. File logs sẽ được mở ở 1 tab mới trên trình duyệt.Bạn có thể xem các câu lệnh đã được lưu trữ lại trong session logs. "
},
{
	"uri": "http://localhost:1313/Work-Shop/vi/5-portfwd/",
	"title": " Lambda Function",
	"tags": [],
	"description": "",
	"content": "Trong bước này chúng ta sẽ tạo Lamda Function, có chức năng xử lý các logic nghiệp vụ là cầu nối giữa FE với BE.\nVai trò của Lamda Function:\nNhận request từ API Gateway. Xử lý và format dữ liệu. Gọi Bedrock API. Xử lý response từ AI model. Trả về kết quả cho API Gateway. Ưu điểm : Serverless, tự động scale, chỉ trả tiền khi sử dụng\n"
},
{
	"uri": "http://localhost:1313/Work-Shop/vi/5-portfwd/5.3-codelamdafunc/",
	"title": "Code for Lambda Function",
	"tags": [],
	"description": "",
	"content": "Trong bước này chúng ta sẽ thực hiện code python sao cho Lamda Func hoạt động\nẤn vào Code. Dưới đây là đoạn code mẫu python của Lamda Function\n# Import lib import boto3 import json # Func bedrock = boto3.client(\u0026#39;bedrock-runtime\u0026#39;, region_name=\u0026#39;us-east-1\u0026#39;) # Func handle def lambda_handler(event, context): # Handle preflight (OPTIONS) request for CORS if event[\u0026#39;httpMethod\u0026#39;] == \u0026#39;OPTIONS\u0026#39;: return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;headers\u0026#39;: { \u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;, \u0026#39;Access-Control-Allow-Headers\u0026#39;: \u0026#39;*\u0026#39;, \u0026#39;Access-Control-Allow-Methods\u0026#39;: \u0026#39;OPTIONS,POST,GET\u0026#39; }, \u0026#39;body\u0026#39;: json.dumps(\u0026#39;Preflight OK\u0026#39;) } # Parse incoming JSON body = json.loads(event[\u0026#39;body\u0026#39;]) user_message = body.get(\u0026#39;message\u0026#39;, \u0026#39;\u0026#39;) history = body.get(\u0026#39;history\u0026#39;, []) # Optional: construct prompt with history conversation = \u0026#34;\u0026#34; for turn in history: conversation += f\u0026#34;User: {turn[\u0026#39;user\u0026#39;]}\\nAssistant: {turn[\u0026#39;assistant\u0026#39;]}\\n\u0026#34; conversation += f\u0026#34;User: {user_message}\\nAssistant:\u0026#34; # Create payload for Titan request_body = { \u0026#34;inputText\u0026#34;: conversation, \u0026#34;textGenerationConfig\u0026#34;: { \u0026#34;maxTokenCount\u0026#34;: 300, \u0026#34;temperature\u0026#34;: 0.7, \u0026#34;topP\u0026#34;: 0.9, \u0026#34;stopSequences\u0026#34;: [] } } # Call Titan model response = bedrock.invoke_model( modelId=\u0026#39;amazon.titan-text-express-v1\u0026#39;, body=json.dumps(request_body), contentType=\u0026#39;application/json\u0026#39;, accept=\u0026#39;application/json\u0026#39; ) # Extract model output result = json.loads(response[\u0026#39;body\u0026#39;].read()) reply = result.get(\u0026#39;results\u0026#39;, [{}])[0].get(\u0026#39;outputText\u0026#39;, \u0026#39;\u0026#39;) # Return response with CORS headers return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;headers\u0026#39;: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;, \u0026#39;Access-Control-Allow-Headers\u0026#39;: \u0026#39;*\u0026#39;, \u0026#39;Access-Control-Allow-Methods\u0026#39;: \u0026#39;OPTIONS,POST,GET\u0026#39; }, \u0026#39;body\u0026#39;: json.dumps({\u0026#39;response\u0026#39;: reply}) } Lưu ý : hãy dùng đúng mã vùng của bạn region_name=\u0026lsquo;us-east-1\u0026rsquo;\n"
},
{
	"uri": "http://localhost:1313/Work-Shop/vi/5-portfwd/5.1-createlamdafunc/",
	"title": "Create the Lambda Function",
	"tags": [],
	"description": "",
	"content": "Trong bước này chúng ta sẽ tạo Lamda Function.\nTruy cập vào Lamda Click Create Function. Sau đó , đặt tên cho function và lựa chọn ngôn ngữ là Python 3.13 Dưới phần Change default execution role \\Chọn Use an exitsting role "
},
{
	"uri": "http://localhost:1313/Work-Shop/vi/5-portfwd/5.2-settingbasic/",
	"title": "Setting basic for Lamda Function",
	"tags": [],
	"description": "",
	"content": "Trong bước này chúng ta sẽ tạo Setting basic for Lamda Function để không xảy ra lỗi nghẽn mạng hay connection time out.\nĐầu tiên ấn vào configuration. Tiếp tục ấn vào Setting basic. Sau đó chỉnh các thông số như sau : Ephemeral storage : 512MB Time out : 2min "
},
{
	"uri": "http://localhost:1313/Work-Shop/vi/6-cleanup/6.1-createapi/",
	"title": "Create an API Gateway ",
	"tags": [],
	"description": "",
	"content": "Trong bước này chúng ta sẽ tạo API gateway.\nTruy cập vào API gateway. Tìm Rest API. Sau đó , đặt tên cho API gateway. 4.Tạo resouce. 5.Đặt tên cho resouce.\nTạo method Sau đó, chọn POST Chọn Lamda Func cho Method Cuối cùng ta sẽ deploy API này lên "
},
{
	"uri": "http://localhost:1313/Work-Shop/vi/6-cleanup/",
	"title": "Create an API Gateway ",
	"tags": [],
	"description": "",
	"content": "API Gateway có vai trò như là Rate limiting, caching, monitoring.\nNhững vai trò thiết yếu của API Gateway trong dự án này là : Nhận request từ frontend hoặc user Xác thực và phân quyền (IAM auth) Định tuyến request đến Lambda Trả về response cho client "
},
{
	"uri": "http://localhost:1313/Work-Shop/vi/7-deploy-fe/",
	"title": "Deploy Frontend Chat UI to an S3 Static Website",
	"tags": [],
	"description": "",
	"content": "Chúng ta sẽ tiến hành Deploy trang web này lên.\nViết code giao diện cho chatbox Đầu tiên ta cần tạo 1 file index.html để ta có thể dễ dàng deploy S3 Vào IDE của mình và tạo file Index.html. Sau đó tham khảo code dưới đây : \u003c!DOCTYPE html\u003e\rAI Chatbot using Amazon Bedrock\r🤖AI Chatbot — Powered by Amazon Bedrock\rSend\r"
},
{
	"uri": "http://localhost:1313/Work-Shop/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/Work-Shop/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]