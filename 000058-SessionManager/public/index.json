[{"uri":"https://tanhoccode.github.io/Work-Shop/3-accessibilitytoinstances/3.1-public-instance/","title":"Access Amazon Bedrock","tags":[],"description":"","content":" Go to the search bar and search for BedRock. Click Model catalog. Scroll down and select Model Access. "},{"uri":"https://tanhoccode.github.io/Work-Shop/example-with-image/","title":"AWS Services Examples","tags":[],"description":"","content":"AWS Services Examples 1. Search for Amazon Bedrock To find the Amazon Bedrock service in AWS Console:\nOpen AWS Console In the search bar, type \u0026ldquo;bedrock\u0026rdquo; Select Amazon Bedrock service from the results 2. IAM Dashboard IAM (Identity and Access Management) management interface:\n3. EC2 Console EC2 instances management interface:\n4. Serverless AI Architecture Serverless AI architecture with Amazon Bedrock:\nService Description Amazon Bedrock Amazon Bedrock is a service that helps build and scale generative AI applications with foundation models.\nIAM (Identity and Access Management) Manage access permissions and security for AWS resources.\nEC2 (Elastic Compute Cloud) Scalable virtual server service in the cloud.\nServerless AI Architecture Serverless architecture for AI chatbot using Amazon Bedrock with components:\nFrontend: S3 Static Site or Amplify Hosting API Gateway: API access point Lambda Function: Logic processing Bedrock (Titan): AI model IAM Role: Access management Usage in Session Manager When working with Session Manager, you may need to access other AWS services to manage resources.\nEnsure EC2 instance has access permissions to necessary AWS services.\n"},{"uri":"https://tanhoccode.github.io/Work-Shop/4-s3log/4.1-updateiamrole/","title":"Create IAM Role","tags":[],"description":"","content":"Create IAM Role for Lambda so Lambda has permission to access Bedrock.\nCreate IAM Role Go to IAM Click Create Roles. In the selection box, choose Lambda. Then click next to continue configuring the Role for Lambda.\n"},{"uri":"https://tanhoccode.github.io/Work-Shop/1-introduce/","title":"Introduction","tags":[],"description":"","content":"The mission of the \u0026ldquo;AthenaBot\u0026rdquo; project is to revolutionize our customer support experience by deploying an intelligent, instant, and always-available Artificial Intelligence (AI) solution. We aim to transform the support department from a cost center into a driver of customer satisfaction and loyalty.\nWe propose deploying \u0026ldquo;AthenaBot\u0026rdquo; â€“ a next-generation AI chatbot, built entirely on AWS Serverless architecture and leveraging the power of Generative AI through Amazon Bedrock service. This solution will provide instant, accurate, and natural customer support 24/7, thoroughly addressing current issues.\nBy using ChatBox AI, you will gain the following advantages:\nAutomate Level 1 requests, expected to save over 200 hours of staff work per month, equivalent to reducing 25-30% of support staff workload. With extremely low operating costs (under $10/month), the project\u0026rsquo;s ROI is almost immediate and will be positive from the first month of operation. Estimated under $10 per month, maximizing AWS Free Tier benefits. Need fast, accurate, 24/7 responses. Provide instant support, anytime, anywhere. With these advantages, you can use your own ChatBox AI to save costs and make your product more reliable.\n"},{"uri":"https://tanhoccode.github.io/Work-Shop/","title":"Serverless AI Chatbot with Amazon Bedrock ","tags":[],"description":"","content":"BELOW IS THE AI CHATBOX PRODUCT. \u003c!DOCTYPE html\u003e\rAI Chatbot using Amazon Bedrock\rðŸ¤– AI Chatbot\rPowered by Amazon Bedrock\nðŸ’¬ Chat with AI Assistant\rðŸ‘‹ Hello! How can I help you?\rSend\r"},{"uri":"https://tanhoccode.github.io/Work-Shop/3-accessibilitytoinstances/3.2-private-instance/","title":"Connect to Private instance","tags":[],"description":"","content":"For Windows instance located in private subnet, there is no public IP, no internet gateway so it cannot go out internet.\nWith this type of instance, the traditional way is to use Bastion host technique which is expensive and laborious, but here we will use Session Manager with this type.\nBasically, the private instance still has to open the TCP 443 port to System Manager, but we don\u0026rsquo;t want to allow connection go out to the internet, but only in its VPC, to enhance our security posture.\nTo do that, we have to include the System Manager endpoint in the VPC, that is, using the VPC interface endpoint:\nVPC interface endpoint is attached to the subnet, so this method can be done not only with private subnet but also with public subnet, meaning that with public subnet, you can completely prohibit TCP 443 go out to the internet.\nContent: Enable DNS hostnames Create VPC Endpoint Connect Private Instance "},{"uri":"https://tanhoccode.github.io/Work-Shop/4-s3log/4.2-creates3bucket/","title":"Set permission for Lambda","tags":[],"description":"","content":"In this step, we will create 2 roles: AmazonBedrockFullAccess and CloudWatchLogsFullAccess for Lambda.\nCreate Permission policies Go to the add permission interface.\nIn the search box, type AmazonBedrockFullAccess. In the search box, type CloudWatchLogsFullAccess. Then, name this Role ChatBoxLambdaRole After that, click Create Role.\n"},{"uri":"https://tanhoccode.github.io/Work-Shop/2-prerequiste/","title":"Technical Architecture","tags":[],"description":"","content":"\rBelow is the diagram describing the project architecture.\nUser: Opens a browser and accesses the chatbot web interface hosted on Amazon S3.\nFrontend (S3): The user enters a question and clicks send. JavaScript code in the browser creates an HTTPS POST request containing the question content to the API Gateway endpoint.\nAPI Gateway: Receives the request, authenticates, and forwards it to the AWS Lambda function.\nAWS Lambda: The Lambda function is triggered. Python code inside the function performs: a. Assumes a pre-configured IAM role with permissions to call Bedrock. b. Builds a complete \u0026ldquo;prompt\u0026rdquo; from the user\u0026rsquo;s question. c. Calls the Amazon Bedrock API, passing the prompt and model name.\nAmazon Bedrock: Processes the prompt, generates a response, and sends it back to Lambda.\nResponse: Lambda receives the response from Bedrock, formats it if necessary, and returns it to API Gateway. API Gateway then forwards this response to the user\u0026rsquo;s browser.\nDisplay: JavaScript on the frontend receives the response and displays the AI\u0026rsquo;s answer on the interface.\n"},{"uri":"https://tanhoccode.github.io/Work-Shop/3-accessibilitytoinstances/","title":"Set Up Amazon Bedrock and Request Access on AWS","tags":[],"description":"","content":"In this step, we will create Amazon Bedrock and Request Access to AWS models\n"},{"uri":"https://tanhoccode.github.io/Work-Shop/4-s3log/","title":"Create an IAM Role for Lambda.","tags":[],"description":"","content":"With IAM role functions to authenticate API Gateway requests and grant Lambda permissions to access Bedrock and ensure end-to-end for the project.\nContent: Create IAM role Set Role for Lambda Select Role for Bedrock Select Role for CloudWatch "},{"uri":"https://tanhoccode.github.io/Work-Shop/5-portfwd/","title":" Lambda Function","tags":[],"description":"","content":"In this step, we will create a Lambda Function that handles business logic and serves as a bridge between Frontend and Backend.\nThe role of Lambda Function:\nReceive requests from API Gateway. Process and format data. Call Bedrock API. Process response from AI model. Return results to API Gateway. Advantages: Serverless, auto-scaling, pay only when used\n"},{"uri":"https://tanhoccode.github.io/Work-Shop/5-portfwd/5.3-codelamdafunc/","title":"Code for Lambda Function","tags":[],"description":"","content":"In this step, we will implement the Python code so that the Lambda Function works.\nClick Code. Below is the sample Python code for the Lambda Function:\n# Import lib import boto3 import json # Func bedrock = boto3.client(\u0026#39;bedrock-runtime\u0026#39;, region_name=\u0026#39;us-east-1\u0026#39;) # Func handle def lambda_handler(event, context): # Handle preflight (OPTIONS) request for CORS if event[\u0026#39;httpMethod\u0026#39;] == \u0026#39;OPTIONS\u0026#39;: return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;headers\u0026#39;: { \u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;, \u0026#39;Access-Control-Allow-Headers\u0026#39;: \u0026#39;*\u0026#39;, \u0026#39;Access-Control-Allow-Methods\u0026#39;: \u0026#39;OPTIONS,POST,GET\u0026#39; }, \u0026#39;body\u0026#39;: json.dumps(\u0026#39;Preflight OK\u0026#39;) } # Parse incoming JSON body = json.loads(event[\u0026#39;body\u0026#39;]) user_message = body.get(\u0026#39;message\u0026#39;, \u0026#39;\u0026#39;) history = body.get(\u0026#39;history\u0026#39;, []) # Optional: construct prompt with history conversation = \u0026#34;\u0026#34; for turn in history: conversation += f\u0026#34;User: {turn[\u0026#39;user\u0026#39;]}\\nAssistant: {turn[\u0026#39;assistant\u0026#39;]}\\n\u0026#34; conversation += f\u0026#34;User: {user_message}\\nAssistant:\u0026#34; # Create payload for Titan request_body = { \u0026#34;inputText\u0026#34;: conversation, \u0026#34;textGenerationConfig\u0026#34;: { \u0026#34;maxTokenCount\u0026#34;: 300, \u0026#34;temperature\u0026#34;: 0.7, \u0026#34;topP\u0026#34;: 0.9, \u0026#34;stopSequences\u0026#34;: [] } } # Call Titan model response = bedrock.invoke_model( modelId=\u0026#39;amazon.titan-text-express-v1\u0026#39;, body=json.dumps(request_body), contentType=\u0026#39;application/json\u0026#39;, accept=\u0026#39;application/json\u0026#39; ) # Extract model output result = json.loads(response[\u0026#39;body\u0026#39;].read()) reply = result.get(\u0026#39;results\u0026#39;, [{}])[0].get(\u0026#39;outputText\u0026#39;, \u0026#39;\u0026#39;) # Return response with CORS headers return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;headers\u0026#39;: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;, \u0026#39;Access-Control-Allow-Headers\u0026#39;: \u0026#39;*\u0026#39;, \u0026#39;Access-Control-Allow-Methods\u0026#39;: \u0026#39;OPTIONS,POST,GET\u0026#39; }, \u0026#39;body\u0026#39;: json.dumps({\u0026#39;response\u0026#39;: reply}) } Note: use the correct region code for your environment region_name=\u0026lsquo;us-east-1\u0026rsquo;\n"},{"uri":"https://tanhoccode.github.io/Work-Shop/5-portfwd/5.1-createlamdafunc/","title":"Create the Lambda Function","tags":[],"description":"","content":"In this step, we will create a Lambda Function.\nGo to Lambda Click Create Function. Then, name the function and select the language as Python 3.13 Under Change default execution role \\Select Use an existing role "},{"uri":"https://tanhoccode.github.io/Work-Shop/5-portfwd/5.2-settingbasic/","title":"Setting basic for Lambda Function","tags":[],"description":"","content":"In this step, we will set basic settings for Lambda Function to avoid network errors or connection timeouts.\nFirst, click configuration. Next, click Setting basic. Then adjust the following parameters: Ephemeral storage: 512MB Timeout: 2min "},{"uri":"https://tanhoccode.github.io/Work-Shop/6-cleanup/6.1-createapi/","title":"Create an API Gateway ","tags":[],"description":"","content":"In this step, we will create an API Gateway.\nGo to API Gateway. Find Rest API. Then, name the API Gateway. Create resource. Name the resource. Create method Then, select POST Select Lambda Function for the Method Finally, deploy this API "},{"uri":"https://tanhoccode.github.io/Work-Shop/6-cleanup/","title":"Create an API Gateway ","tags":[],"description":"","content":"API Gateway serves as Rate limiting, caching, monitoring.\nEssential roles of API Gateway in this project are: Receive requests from frontend or user Authentication and authorization (IAM auth) Route requests to Lambda Return response to client "},{"uri":"https://tanhoccode.github.io/Work-Shop/7-deploy-fe/","title":"Deploy Frontend Chat UI to an S3 Static Website","tags":[],"description":"","content":"We will proceed to deploy this website.\nWrite interface code for chatbox First, we need to create an index.html file so we can easily deploy to S3\nOpen your IDE and create file Index.html. Then refer to the code below: https://github.com/Tanhoccode/UI/blob/master/index.html Then, we go to S3 to create a Bucket Create Bucket Set permissions for Bucket We need to upload the index.html file above Upload successful Scroll down to find Static web hosting and click Edit Enable Static web hosting and index.html file Go back and click on Permission Set Permission Policy for ChatBox And finally go back to the index.html file and we will see the successful deployment link And here is our product "},{"uri":"https://tanhoccode.github.io/Work-Shop/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://tanhoccode.github.io/Work-Shop/tags/","title":"Tags","tags":[],"description":"","content":""}]